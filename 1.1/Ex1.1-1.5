#lang sicp 

; Ex 1.2
(/ (+ 5 4
      (- 2
         (- 3
            (+ 6 4/5))))
   (* 3 (- 6 2) (- 2 7)))

; Ex 1.3
(define (square-sum-two-largest a b c)
  (+ (if (or (> a b) (> a c)) (* a a) 0 )
     (if (or (> b a) (> b c)) (* b b) 0 )
     (if (or (> c a) (> c b)) (* c c) 0 )))

; Ex 1.4
; explanation: the final code being run is either (+ a b) or (- a b)
; The operator, "+" or "-" is chosen based on the result of the predicate
; (> b 0) That is pretty nifty.
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

; Ex 1.5
; Careful. Defining a function whose body is the function.
; Calling "p" returns the interpretor response #<procedure:p>
; Calling "(p)" invokes the function, which seems to result in an
; endless loop, as the body of the function that is evaluated is just a
; call to the function. Recurse forever.
(define (p) (p))

; Simple function
(define (test x y)
  (if (= x 0)
      0
      y))

; (test 0 (p))
;
; Applicative order will cause the above to expand out the operators prior to
; them being needed. I think it will result in an infinite loop, as it
; tries to get a final value for the expression (p) in the if section, but it
; won't because it recursively calls itself forever
;
; Normal order for the above I believe will leave the (p) untouched, as
; the predicate check leads to the unexpanded "if" being evaluated
; only enough to reach the "true" response, and never needed to touch
; the "false" response, which remains "(p)" and is not evaluated
