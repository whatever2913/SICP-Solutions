#lang sicp

; Ex 1.11
; Recursive version:

(define (f-recurs n)
  (cond
    ((< n 3) n)
    (else (+ (f-recurs (- n 1))
             (* 2 (f-recurs (- n 2)))
             (* 3 (f-recurs (- n 3)))))))


; Iterative version

(define (f-it a b c n)
  (cond ((= n 0) a)
        (else (f-it b c (+
                         (* 3 a)
                         (* 2 b)
                         c)
                    (- n 1)))))

(define (f-iter n)
  (f-it 0 1 2 n))

#|
Sample runs:
> (f-recurs 0) (f-recurs 1) (f-recurs 2) (f-recurs 3) (f-recurs 4) (f-recurs 5) (f-recurs 6)
0
1
2
4
11
25
59
> 
> (f-iter 0) (f-iter 1) (f-iter 2) (f-iter 3) (f-iter 4) (f-iter 5) (f-iter 6)
0
1
2
4
11
25
59
>
> (f-iter 2000)

> 
|#
