#lang sicp
; Ex 1.23
; Modify the smallest-divisor procedure to only test odd numbers (with the
; exception of testing 2). First we add a next procedure to return 3 (if 2)
; or to add 2 to the input

(define (next x)
  (if (= x 2)
      3
      (+ x 2)))
  
; Now we change the applicable part of the smallest divisor procedure

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor))))) ; change here

; It is hard on my system to verify if the run time is now halved. Im getting
; large variance between runs of the same procedure, making it the certainty
; of speed reduction hard to deduce

; i.e I get things like this
; 1000000097 *** 42163
; 1000000097 *** 3832
; Its mostly abour 4,000

(define (smallest-divisor n)
  (find-divisor n 2))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (square x) (* x x))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes start end)
  (cond ((>= start end) (timed-prime-test end))
        ((even? start) (search-for-primes (+ start 1) end))
        ((even? end) (search-for-primes start (- end 1)))
        (else        
         (timed-prime-test start)
         (search-for-primes (+ start 2) end))))
