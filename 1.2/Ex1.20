#lang sicp

Ex. 1.20
; Euclid's algorithm for finding the GCD of two integers, given below:

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

; Using normal-order evaluation, how many times is the remainder operation (a
; primitive) performed for evaluationg (gcd 206 40)? * The if special form is
; defined to evaluate the predicate, and then evaluate either the consequent
; (if the predicate is #t), or the alternative if the predicate is #f
; Note, remainder is abbreviated to r to save space ala (define r remainder) 


(gcd 206 40)
(if (= 40 0))
(gcd 40 (r 206 40))
; a=40
; b=(r 206 40)
(if (= (r 206 40) 0)
;remainder performed here, answer = 6, #f
(gcd (r 206 40) (r 40 (r 206 40)))
; a=(r 206 40)
; b=(r 40 (r 206 40))
(if (= (r 40 (r 206 40)) 0)
; remainder two times here, answer = 4, #f
(gcd (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40))))
; a = (r 40 (r 206 40))
; b = (r (r 206 40) (r 40 (r 206 40)))
(if (= (r (r 206 40) (r 40 (r 206 40))) 0)
; remainder x4, answer = 2, #f
(gcd (r (r 206 40) (r 40 (r 206 40))) (r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40)))))
; a = (r (r 206 40) (r 40 (r 206 40)))
; b = (r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40))))
(if = (r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40)))) 0)
; remainder x7, answer finally is 0, #t, so we can finish by evaluating a
(r (r 206 40) (r 40 (r 206 40)))
; Another 4 remainder operations, final answer is 2
; a total of 1+2+4+7+4 = 18 remainder operations are performed to evaluate our
; expression (gcd 206 40) using normal-order evaluation.

; For applicative-order evaluation its smaller
(gcd 206 40)
(if (=40 0) ; #f
(gcd 40 (r 206 40))
; remainder performed
(gcd 40 6)
(if (= 6 0) ; #f
(gcd 6 (r 40 6))
;... remainder performed
(gcd 6 4)
(if (= 4 0) ; #f
(gcd 4 (r 6 4))
; remainder performed
(gcd 4 2)
(if (= 2 0) ; #f
(gcd 2 (r 4 2))
; remainder performed
(gcd 2 0)
(if (= 0 0) ; #t
2

; Using applicative-order evaluation, the remainder function is performed 4 times
    
