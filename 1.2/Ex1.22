#lang sicp

; Ex 1.22
; Time the prime number test
; First, the procedure

(define (search-for-primes start end)
  (cond ((>= start end) (timed-prime-test end))
        ((even? start) (search-for-primes (+ start 1) end))
        ((even? end) (search-for-primes start (- end 1)))
        (else        
         (timed-prime-test start)
         (search-for-primes (+ start 2) end))))

; Now to find the first 3 primes starting at 1,000 10,000 100,000 and 1,000,000
; Roughly speaking, the time to compute is going up, but there is too much
; variance in this sample to say with certainty that the time taken takes
; sqrt(10) ~ 3.2 times more for each 10 fold increase in numbers being tested.
; But it does appear that way

#|
> (search-for-primes 1000 1050)
...
1009 *** 8
...
1013 *** 9
...
1019 *** 9
> (search-for-primes 10000 10500)
...
10007 *** 8
10009 *** 19
...
10037 *** 17
> (search-for-primes 100000 100100)
...
100003 *** 51
...
100019 *** 175
...
100043 *** 21
> (search-for-primes 1000000 1000200)
...
1000003 *** 154
...
1000033 *** 267
...
1000037 *** 62
|#


(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (square x) (* x x))

;;

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

