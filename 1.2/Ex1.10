#lang sicp

; Ex 1.10
; Ackermann's function
#|
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10) = 2^10 = 1024
(A 2 4) = 2^2^2^2 = 65,536
(A 3 3) = 65,536

The procedure definitions are ways to rewrite the Ackermann function above
with a constant for the value of x. For example,
(define (f n) (A 0 n))
is the Ackerman function with the X value held constant to 0.

(define (f n) (A 0 n)) - (f n) computes 2n i.e. (f 5) = 10
(define (g n) (A 1 n)) - (g n) computes 2^n i.e. (g 5) = 2^5 = 32
(define (h n) (A 2 n)) - (h n) computes 2^2^2^2^......^2 where n is the total
number of 2's in the answer. I.E (h 1) = 2, (h 2) = 2^2 = 4, (h 3) = 2^2^2 =16
and so on
|#
